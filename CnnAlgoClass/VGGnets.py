import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F

class VGG(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1=nn.Conv2d(in_channels=3,out_channels=64,kernel_size=3,padding=1)
        self.conv2=nn.Conv2d(in_channels=64,out_channels=128,kernel_size=3,padding=1)
        self.conv3=nn.Conv2d(in_channels=128,out_channels=256,kernel_size=3,padding=1)
        self.conv4=nn.Conv2d(in_channels=256,out_channels=256,kernel_size=3,padding=1)
        self.conv5=nn.Conv2d(in_channels=256,out_channels=512,kernel_size=3,padding=1)
        self.conv6=nn.Conv2d(in_channels=512,out_channels=512,kernel_size=3,padding=1)
        self.conv7=nn.Conv2d(in_channels=512,out_channels=512,kernel_size=3,padding=1)
        self.conv8=nn.Conv2d(in_channels=512,out_channels=512,kernel_size=3,padding=1)
        #Flat layers 
        self.fc1=nn.Linear(512*7*7,512)
        self.fc2=nn.Linear(512,512)
        self.out=nn.Linear(512,10)
    def forward(self,t):
        t=self.conv1(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        t=self.conv2(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        t=self.conv3(t)
        t=F.relu(t)
        t=self.conv4(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        t=self.conv5(t)
        t=F.relu(t)
        t=self.conv6(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        t=self.conv7(t)
        t=F.relu(t)
        t=self.conv8(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        #Flat layers
        t=t.reshape(-1,512*7*7)
        t=self.fc1(t)
        t=F.relu(t)
        t=self.fc2(t)
        t=F.relu(t)
        t=self.out(t)
        return t
    def extract_features(self, t):
        t=self.conv1(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        t=self.conv2(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        t=self.conv3(t)
        t=F.relu(t)
        t=self.conv4(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        t=self.conv5(t)
        t=F.relu(t)
        t=self.conv6(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        t=self.conv7(t)
        t=F.relu(t)
        t=self.conv8(t)
        t=F.relu(t)
        t=F.max_pool2d(t,kernel_size=2,stride=2)
        #Flat layers
        t=t.reshape(-1,512*7*7)
        t=self.fc1(t)
        t=F.relu(t)
        t=self.fc2(t)
        t=F.relu(t)
        return t
